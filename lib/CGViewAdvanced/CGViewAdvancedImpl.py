# -*- coding: utf-8 -*-
#BEGIN_HEADER
import logging
import os

import CGViewAdvanced.Utils.CGViewUtil as cgu

#END_HEADER


class CGViewAdvanced:
    '''
    Module Name:
    CGViewAdvanced

    Module Description:
    A KBase module: CGViewAdvanced
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.2"
    GIT_URL = "https://github.com/kbaseapps/CircularGenomeAdvanced.git"
    GIT_COMMIT_HASH = "606ad2d7f36955fa75817c22429f903c7d036018"

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        self.callback_url = os.environ['SDK_CALLBACK_URL']
        self.shared_folder = config['scratch']
        logging.basicConfig(format='%(created)s %(levelname)s: %(message)s',
                            level=logging.INFO)
        #END_CONSTRUCTOR
        pass


    def run_CGViewAdvanced(self, ctx, params):
        """
        run_CGViewAdvanced: run CGView
        ref: http://wishart.biology.ualberta.ca/cgview/application.html
        :param params: instance of type "CGViewInputs" (required params:
           input_file: ref to Genome workspace_name: the name of the
           workspace it gets saved to optional params: linear: Genome is
           linear. gc_content: GC content shown gc_skew: GC skew shown
           at_content: AT content shown at_skew: AT skew shown average: GC,
           GC skew, AT, and AT skew plots should show the deviation of each
           value from the average for the entire genome. scale: GC, GC skew,
           AT, and AT skew plots should be scaled to fill the available
           Y-axis space on the map. orfs: ORFs drawn. combined_orfs: ORFs
           should drawn with forward and reverse strand represented by a
           separate ring. orf_size: The minimum length of ORFs (in codons) to
           show. tick_density: The density of the tick marks on the map.
           details: Sequence information legend drawn legend: Feature legend
           drawn condensed: Thin feature rings used regardless of map size.
           feature_labels: Feature labels read from the GenBank or EMBL file
           drawn. orf_labels: Labels for ORFs drawn. show_sequence_features:
           Draw features contained in the file if it is a Genbank or EMBL
           file. ref:
           https://github.com/happykhan/BRIG/tree/master/cgview/cgview_xml_bui
           lder) -> structure: parameter "input_file" of type "obj_ref" (An
           X/Y/Z style reference), parameter "linear" of type "boolean" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "gc_content" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1)), parameter "gc_skew" of type "boolean" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "at_content" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1)), parameter "at_skew" of type "boolean" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "average" of type "boolean" (A boolean - 0 for false, 1 for true.
           @range (0, 1)), parameter "scale" of type "boolean" (A boolean - 0
           for false, 1 for true. @range (0, 1)), parameter "orfs" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "combined_orfs" of type "boolean" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter "orf_size" of Long,
           parameter "tick_density" of Double, parameter "details" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "legend" of type "boolean" (A boolean - 0 for false, 1
           for true. @range (0, 1)), parameter "condensed" of type "boolean"
           (A boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "feature_labels" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1)), parameter "orf_labels" of type "boolean" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "show_sequence_features" of type "boolean" (A boolean - 0 for
           false, 1 for true. @range (0, 1))
        :returns: instance of type "CGViewResults" (report_name: report name
           generated by KBaseReport report_ref: report reference generated by
           KBaseReport) -> structure: parameter "report_name" of String,
           parameter "report_ref" of String
        """

        # ctx is the context object
        # return variables are: output
        #BEGIN run_CGViewAdvanced

        cgu.process_params(params)

        '''
        Make output directory and subdirectories
        '''
        output_dir= os.path.join(self.shared_folder, 'output_folder')
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        xml_output_dir= os.path.join(output_dir, 'xml_outputs')
        if not os.path.exists(xml_output_dir):
            os.makedirs(xml_output_dir)
        image_output_dir= os.path.join(output_dir, 'image_outputs')
        if not os.path.exists(image_output_dir):
            os.makedirs(image_output_dir)
        gbk_dir= os.path.join(output_dir, 'gbk_files')
        if not os.path.exists(gbk_dir):
            os.makedirs(gbk_dir)

        base, gbk_path = cgu.fetch_genome_files(self, params, gbk_dir)

        cmd = cgu.build_cgview_xml_cmd(params)

        xml_file = cgu.run_cmd_to_build_xml(cmd, xml_output_dir, base, gbk_path)

        png_path, jpg_path, svg_path = cgu.create_imgs_from_xml(image_output_dir, xml_file, base)

        report_info = cgu.gen_report(self, params, png_path, jpg_path, svg_path, base)

        # Test example output - works
        # os.chdir("/opt/cgview")
        # test_output_file_path = os.path.join(output_dir, "cybercell.png")
        # subprocess.call(["java", "-jar", "cgview.jar", "-i", "cybercell.xml", "-o", test_output_file_path, "-f", "png"])

        output = {
            'report_name': report_info['name'],
            'report_ref': report_info['ref'],
        }
        #END run_CGViewAdvanced

        # At some point might do deeper type checking...
        if not isinstance(output, dict):
            raise ValueError('Method run_CGViewAdvanced return value ' +
                             'output is not type dict as required.')
        # return the results
        return [output]
    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
